__author__ = 'chakib'
import random



class sat:
    def __init__(self, clauses=[]):
        self.clauses = clauses.copy()
        self.maxi = -1
        for i in clauses:
            for j in i:
                if abs(j) > self.maxi: self.maxi = abs(j)

    def interpreter(self, interpretation):
        cpt = 0
        return [self.satisfait(c, interpretation) for c in self.clauses]

    def satisfait(self, c, interpretation):
        var = False
        for i in c:
            if i < 0:
                var = var or not interpretation[abs(i) - 1]
            else:
                var = var or interpretation[abs(i) - 1]
            if var: return True
        return False

    def generate_solution(self):
        return [bool(random.getrandbits(1)) for _ in range(self.maxi)]


    def gsat(self, maxiteration=100, maxflip=30):
        solution = self.generate_solution()
        initial = self.interpreter(solution)

        for i in range(maxiteration):
            testsolution = self.generate_solution()
            l = self.interpreter(testsolution)
            for j in range(maxflip):
                var = self.get_random_var(l)
                testsolution[var] = not testsolution[var]
                l1 = self.interpreter(testsolution)
                if sum(l1) > sum(l):
                    l = l1
                else:
                    testsolution[var] = not testsolution[var]

            if sum(l) > sum(initial):
                solution = testsolution
                initial = l
        return solution

    def get_random_var(self, evaluation):
        c = evaluation.index(False)
        print(evaluation)
        print(c)
        i = abs(random.choice(self.clauses[c])) - 1
        print(i)
        return i


    def generate_problem(self, max_clauses=10, max_vars=10):
        l = []
        self.maxi = max_clauses
        x = list(range(-max_vars, max_vars + 1))
        x.remove(0)

        for i in range(max_clauses):
            l.append([random.choice(x) for _ in range(random.randint(3, max_vars / 2))])
        self.clauses = l
        return l


l = sat([[-28, -21, 46, 12, -41, -12, 44, 15, -26, -38, -20, -31, -33, -30, 10, -23, 42, -13],
         [37, 46, 38, 47, -37, 43, -41, 35, 39, 3, -40, -7],
         [-36, -5, 50, 36, -39, -40, -6, 35, -43, 50, 1, 25, -35, 35, -47, -22, -3, -22, -39, 49, -27],
         [5, -28, 24, -42, 37, -17, 35, -33, 8, -33],
         [-27, -35, 47, 50, 15, 28, 14, 27, -41, -3, 10, 7, -21, 28, 30, 28, 36],
         [4, -32, 26, 9, 11, -20, 49, -46, 17, 8, 39, -27, -12, -23, 44, -43],
         [3, -31, -2, 29, 5, 2, -22, -27, -42, -13, -50, -23, -22, -39],
         [-48, 37, 48, -5, -44, -30, 16, -24, 32, -46, -34, 7, 24], [36, 43, 12, -31],
         [26, 14, 39, 2, 45, -16, 45, 3, 11, 31, -20],
         [-40, -11, -1, -25, 48, -40, -12, 39, 50, -12, -13, -2, 48, 3, 33],
         [-40, 18, -4, -31, -29, 47, -41, 17, 39, -21, 13, 4, 48, -8, 38, -33, -24, 19, 38, 47, 50],
         [15, 28, -34, 38, -45, 4, 43, -33, -37, -38, 37, -50, 38, -48, 1, -12, -34, 49, -6, 46, 29, -46, -33, 27],
         [-39, 25, 24, -33, -22, 4, 42, -23, 15, -24, -14, -16, 48, -30, 29, 29, 10, 4, 9, 4, 34, -10, -12, -25, 33],
         [-30, -9, 30, 24, 33, -34, -50, 7, 18, -24, 49, -28, 39, -38],
         [45, -21, 27, 10, 39, -2, 5, -44, 35, -41, 44, 31, -2, -39, 33, 5, 19, 10, 11, -35, -23, -35, -2],
         [-49, -3, -13, -48, 23], [42, 6, 12, -44, -27],
         [29, -10, -27, -19, 3, -34, 39, 37, 4, -38, -12, 31, 41, -25, 30, -18, -25, -11, 4, 11, 35, -49, 7],
         [-43, 1, -33, -23, -11, 20, -7, 3, 6, -2, 35],
         [30, -8, -38, 44, 14, -43, 43, 20, 50, -50, -13, 22, 43, 6, -34, 10, 11],
         [44, 33, 48, -39, 17, -11, -41, 5, 42],
         [2, -5, 5, -42, 13, 45, 17, -44, -8, -38, -29, 16, 29, -50, -36, 22, -19],
         [41, -6, 15, -10, 13, -30, 43, 21, -10, 48, 8, -15, 41, -6, 4, 22, 36, -12, 24, 25, 4],
         [11, 47, -48, -14, 16, 16, 44, -10, -49, -18, -3, -10, -4, -13, -10, 44, 32, -1, -24, 29, 33],
         [33, -42, -11, 9, 49, 11, -12, 22, 41, -28, -13, 36, 8, -39, -40, -2, -6, -33, -45, -22],
         [21, -43, 50, 7, -23, -30, 13, 10, 2, -42, 19, 8, -19],
         [42, 6, 47, -14, 47, 39, 3, 12, 22, -35, 24, -3, 33, 27, -11, -21, 11, -17, -9, -5],
         [-12, 47, -43, -8, -2, -45, -50, -35],
         [43, 28, 16, -13, 9, 31, -34, -13, -44, -42, 5, 7, 3, 31, -25, -10, -21, -33, 6, -34],
         [-47, -15, 26, 4, -25, 3, 1, -11, 24, -32, 26, 36, -25, -37, -24, -14, -38, 49, -19], [-14, 39, 43, -34, -7],
         [24, -40, 29, 34, 36, -5, -40, 17, 46, -44, -29, 43, 14, -47, 3], [10, 23, -1, 33, 41, 25, 19],
         [24, -11, 30, 45, 19, -13, 6, 7],
         [-5, -8, 2, 50, -38, -49, -21, 39, 45, 24, 35, -31, 49, 27, -38, 35, -21, -38, -41],
         [-12, 20, -6, -4, 45, 40, -24, -19, -10, 30, -17],
         [-48, 33, -20, -21, 20, 22, -3, -20, 15, 10, -45, -8, 13, 12, 48, 43, 14, 14, -26, 31, -38, -32, -13, -49,
          -28], [-45, 48, 38, 6, -36, 20, 24, 47, 40, 38, -30, 16, -24, -6, 22, 47, -47, 47, -48, -11, -28],
         [41, 27, 45, -13, -46, 34, 31, -25], [-30, 31, -8, -26, 29, -1, -2, 15, 16, 7, -50, -11, 6, 2, 14, 40, 8, -34],
         [3, -29, 27, 36, 21, 41, -27, -9, 2, -25, 50, 34, -22],
         [-7, 43, 42, 33, -26, -8, -30, 26, 36, 10, 39, 5, 9, 29, 39, 17, -2, 20, -7, 47, -45],
         [20, 44, -25, -34, -11, -14, -12, -24, 28, 31, -20, -4, -2], [43, -32, -19, -44, 11, 12, 28],
         [-19, 15, 14, -19, -26, -30, -34, 37, 13, -36, 2, -49, -50, 17, -23, -4, 4, -10, 28, -11, 16, 9],
         [3, 7, -29, 8, -19, 31, -13, 17, -34, -11, -11, 21, 10, -17, -43, 2, -33],
         [-40, 31, -15, -22, -39, 27, 24, -28, 42, 3, 24, -32, -18, 9, 46, -34, -21, 12],
         [-46, 34, -35, 35, 18, -16, 45, 29, 42, -36, 36, -19], [19, 35, -11, -5, -41], [-40, -27, -41, -16, 10, 9],
         [-8, -35, 37, 31, -43, 50, -49, -13, 37, 29, -46, 48, 30, -23, 15, 36, -15, -11, -27, -16, 45, 12, 50, 35,
          -28], [-43, -20, 39],
         [42, -25, 35, 2, 18, -11, 35, -38, 25, -25, -26, 9, 50, -1, -50, -46, 5, -1, 45, -7, -43, -20, -49, -14, -43],
         [-25, -17, 48, 39, 43, -6, 43, 35, 21, 5, -18, 44, -20, -8], [-41, -6, 6, 2, -21, -49, -21, -2],
         [-30, 11, -39, 47, 26], [-6, 13, 22, -20, -1, -29, -10, -30],
         [-40, 33, 11, -39, -23, 1, -35, -34, -21, -38, 43], [2, 22, -46, -33, -6, 33, -17, -40, -32, -14, 44, -26, 44],
         [-21, 14, 41, -39, -18, -27, -9], [-31, -40, -49, 19, 39, 16, 7, 7, 10, -35],
         [-18, -34, 12, 50, -31, -28, -44, -14, 47, -47, 27, 48, 45, 5, -11, -31],
         [-28, 43, -44, -2, 1, -12, -16, 28, 31, -27, -50, 39, 39, -50, 45, 22, -1, 16, -35, -41, -11],
         [4, 30, 6, 27, 47, 21, -21, 48, 5, 42, 26, 41, -39, 39, 17, -29, 3],
         [-13, 1, 20, -20, -3, -32, -3, -5, -8, 22, 40, -48], [28, -12, -4, 4, -34, 25, 3, 24],
         [-6, -38, -23, -12, 38, 12, 39, 30, -21, 29, 49, 47, 17, 32, -10, 31, 18, -8, -6, -6, 22, -5, -21, -32],
         [-40, 25, 43], [34, -49, 6, -9, -37, 12, 46, -50, -4, 27, -22, 47, 35, -43, 46],
         [-23, -3, -3, -23, 2, -6, -26, -3, -31, -11, -32, 39, -5, -29, -35, 8, -33, -29, -24, -26, -9, -37, 16, -13],
         [2, -50, 13, 14], [21, -38, 5, -21, 34, 50, 8, 11, 50, -10, 42], [4, 42, -11, -30, -45],
         [-49, 20, 9, 21, 50, -42], [31, -18, -23, 21, -26, 35, -19, -16, -33, 21, -38, 26, 48],
         [-50, -19, -4, 45, -21, -5, -39, -10, 31, 30, 14, -12, -38, 41, 35, 26, -23, -49, -6], [-20, 44, 1, -46, -49],
         [-48, 5, 35, 42, -28, 48, -17, 22, -35, 45, 36, 17],
         [-37, 13, 35, -3, 34, 30, 9, 38, 50, -29, 33, -44, 17, 7, -6, 28], [27, -24, -9, -39, 50, -48, -26, 13, 38],
         [12, -10, -47, 43, -4, 2], [-49, 21, -11, -29],
         [-5, 14, 50, 26, 27, -23, -17, -4, -28, 47, 5, 30, 12, 17, 45, -36, -24, 50, 32, -7, -23, 5, -8],
         [-47, 8, 35, -2, 20, -31, -22, 34, 43, 7, 18, 36, 14, -14, 12, -8, 9, -35, -37],
         [6, 9, 46, 16, -31, 24, 35, -44, 16, -31, -17, -33, 9, 49, 39, 40, -3], [-18, -30, 4, 50, -38, 28, 22, -46],
         [4, -45, -19, 31, 26, 6, 8, 36], [39, 8, 34, 17, -30, 37, 24, 17, 34, 19],
         [10, 8, 20, -39, -47, -38, 30, -29, 14, -24, -24, -28, -30, -11, 50, -8],
         [-33, -12, 22, 20, -44, 18, 50, -4, 27, -1, 27, 41, -23, 43, -47, -32, 25, -26, -36, 25],
         [38, -12, -48, -37, 22, -49, -30, -6],
         [24, 40, 18, -40, 39, 26, -24, -24, 27, 18, 7, -49, 29, 5, 28, -10, 2, -28, -5, 27, -5],
         [-33, -20, -3, -27, 21, 45, 39, -12, 11, -35, 42, 44, -40, -16, 31, -48, -19, 50],
         [-41, -34, 39, -28, -37, 9, 16, 44, -50, -4, -23, -10, 35, -4, 33, -47, -46, 32, -34, 7, 30],
         [-48, 11, 8, 7, 17, 18, -41, -39, 39, -36, -34, 50, -23, 47],
         [42, 45, 7, -5, 42, -43, 24, -14, 9, 33, -7, 47, -4, -10, -39, 16, 46, -23],
         [-46, -25, -23, -31, 39, -16, -43, 32, -40, -45],
         [-40, -4, 10, 8, -11, -3, 36, -5, -18, -32, 45, 20, -26, -26, 11], [27, -22, -18, 45, -12, -8, 27, -28, -6]]
        )
# print(l.generate_problem(100, 50))
print(l.maxi)
x = l.gsat(100, 50)
print(x)
print(x.count(True))
# print(i)


